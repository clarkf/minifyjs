#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    minify = require(path.join(__dirname, '../')),
    input_stream,
    output_stream,
    log = console.error,
    mode,
    options = {},
    optimist = require('optimist'),
    argv = optimist
        .usage("$0 [-b|-m] [--engine=ENGINE] [--level=0|1|2] -i file.js -o out.js\n\
cat file.js | $0 [-b|-m] [--engine=ENGINE] [--level=0] > out.js")
        .boolean("minify").alias("minify", "m")
        .describe("minify", "Enable minification")
        .boolean("beautify").alias("beautify", "b")
        .describe("beautify", "Enable beautification")
        .alias("level", "l").default("level", 0)
        .describe("level", "Set minification level")
        .string("engine").alias("engine", "e")
        .describe("engine", "Set beauti/minification engine")
        .default("engine", "uglify")
        .string("output").alias("output", "o")
        .describe("output", "File to output to, otherwise stdout")
        .string("input").alias("input", "i")
        .describe("input", "File to read, otherwise stdin")
        .alias("version", "v")
        .argv;

if (argv.version) {
    log("minifyjs v" + minify.version);
    process.exit(0);
}

if (argv.help) {
    optimist.showHelp(log);
    process.exit(0);
}

if (argv._.indexOf('list') > -1) {
    // List engines and bail
    log("minifyjs v" + minify.version + "\n");
    log("Minifiers:\n");
    Object.keys(minify.minifiers).forEach(function (m) {
        log("\t- " + m);
    });
    log("\nBeautifiers:");
    Object.keys(minify.beautifiers).forEach(function (m) {
        log("\t- " + m);
    });
    process.exit(0);
}

if (argv.minify && argv.beautify) {
    optimist.showHelp(log);
    log("\nCannot minify and beautify, please choose only one of -b/-m.");
    process.exit(0);
}

if (!argv.minify && !argv.beautify) {
    optimist.showHelp(log);
    log("\nPlease specify either -b[eautify] or -m[inify].");
    process.exit(0);
}

// Determine input
if (argv.input) {
    // File specified
    input_stream = fs.createReadStream(argv.input);
} else {
    // Stdin
    input_stream = process.stdin;
    input_stream.resume();
}

// Determine output
if (argv.output) {
    // Output file specified
    output_stream = fs.createWriteStream(argv.output);
} else {
    // Stdout
    output_stream = process.stdout;
}

options.engine = argv.engine;
options.level = argv.level;

mode = argv.minify ? minify.minify : minify.beautify;
mode(input_stream, options, function (err, result) {
    if (err)
        throw err;
    output_stream.write(result);
    try {
        output_stream.end();
    } catch (e) {}
});